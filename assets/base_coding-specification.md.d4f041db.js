import{_ as s,c as a,o as n,a as l}from"./app.c44dab2f.js";const C=JSON.parse('{"title":"编码规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么需要代码规范","slug":"为什么需要代码规范","link":"#为什么需要代码规范","children":[]},{"level":2,"title":"命名规范","slug":"命名规范","link":"#命名规范","children":[{"level":3,"title":"包名","slug":"包名","link":"#包名","children":[]},{"level":3,"title":"文件名","slug":"文件名","link":"#文件名","children":[]},{"level":3,"title":"结构体命名","slug":"结构体命名","link":"#结构体命名","children":[]},{"level":3,"title":"接口命名","slug":"接口命名","link":"#接口命名","children":[]},{"level":3,"title":"变量命名","slug":"变量命名","link":"#变量命名","children":[]},{"level":3,"title":"常量命名","slug":"常量命名","link":"#常量命名","children":[]}]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"函数注释","slug":"函数注释","link":"#函数注释","children":[]},{"level":3,"title":"代码逻辑注释","slug":"代码逻辑注释","link":"#代码逻辑注释","children":[]},{"level":3,"title":"包注释","slug":"包注释","link":"#包注释","children":[]},{"level":3,"title":"接口注释","slug":"接口注释","link":"#接口注释","children":[]},{"level":3,"title":"注释风格","slug":"注释风格","link":"#注释风格","children":[]}]},{"level":2,"title":"import 规范","slug":"import-规范","link":"#import-规范","children":[{"level":3,"title":"import 格式","slug":"import-格式","link":"#import-格式","children":[]},{"level":3,"title":"包引入顺序","slug":"包引入顺序","link":"#包引入顺序","children":[]}]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}],"relativePath":"base/coding-specification.md"}'),e={name:"base/coding-specification.md"},o=l(`<h1 id="编码规范" tabindex="-1">编码规范 <a class="header-anchor" href="#编码规范" aria-hidden="true">#</a></h1><h2 id="为什么需要代码规范" tabindex="-1">为什么需要代码规范 <a class="header-anchor" href="#为什么需要代码规范" aria-hidden="true">#</a></h2><ol><li>代码规范不是强制的，也就是你不遵循代码规范写出来的代码运行也是完全没有问题的</li><li>代码规范目的是方便团队形成一个统一的代码风格，提高代码的可读性，规范性和统一性。本规范将从命名规范，注释规范，代码风格和 Go 语言提供的常用的工具这几个方面做一个说明。</li><li>规范并不是唯一的，也就是说理论上每个公司都可以制定自己的规范，不过一般来说整体上规范差异不会很大。</li></ol><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-hidden="true">#</a></h2><p>命名是代码规范中很重要的一部分，统一的命名规则有利于提高的代码的可读性，好的命名仅仅通过命名就可以获取到足够多的信息</p><ul><li>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个<strong>大写字母开头</strong>，如：Group1，那么使用这种形式的标识符的对象就可以被<strong>外部包</strong>的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）</li><li>命名如果以<strong>小写字母开头</strong>，则对包外是<strong>不可见</strong>的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）</li></ul><h3 id="包名" tabindex="-1">包名 <a class="header-anchor" href="#包名" aria-hidden="true">#</a></h3><p>保持 <strong>package 的名字</strong>和<strong>目录</strong>保持<strong>一致</strong>，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">clac</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"></span></code></pre></div><h3 id="文件名" tabindex="-1">文件名 <a class="header-anchor" href="#文件名" aria-hidden="true">#</a></h3><p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">user_model</span><span style="color:#89DDFF;">.</span><span style="color:#89DDFF;font-style:italic;">go</span></span>
<span class="line"></span></code></pre></div><h3 id="结构体命名" tabindex="-1">结构体命名 <a class="header-anchor" href="#结构体命名" aria-hidden="true">#</a></h3><ul><li>采用驼峰命名法，首字母根据访问控制大写或者小写</li><li><code>struct</code> 声明和初始化格式采用多行</li></ul><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 多行声明</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Username  </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    Email     </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    age       number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 多行初始化</span></span>
<span class="line"><span style="color:#A6ACCD;">u </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Username</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bobby</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    Email</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shibin@xxx.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">17</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="接口命名" tabindex="-1">接口命名 <a class="header-anchor" href="#接口命名" aria-hidden="true">#</a></h3><ul><li>接口命名规则和结构体一样</li><li>单个函数的结构提名以 <code>er</code> 最为后缀，例如 <code>Reader</code> 、<code>Writer</code></li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Reader</span><span style="color:#A6ACCD;"> interface {</span></span>
<span class="line"><span style="color:#A6ACCD;">    Read(p []byte) (n int, err error)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="变量命名" tabindex="-1">变量命名 <a class="header-anchor" href="#变量命名" aria-hidden="true">#</a></h3><p>遵循驼峰法， 首字母根据访问控制原则大写或者小写。但遇到特有名词时，需要遵循以下规则：</p><ul><li>如果变量为私有，且特有名词为首个单词，则使用小写，如 <code>apiClient</code></li><li>其它情况都应当使用该名词原有的写法，如 <code>APIClient</code>、<code>repoID</code>、<code>UserID</code><ul><li>错误示例：<code>UrlArray</code>，应该写成 <code>urlArray</code> 或者 <code>URLArray</code></li></ul></li><li>若变量类型为 <code>bool</code> 类型，则名称应以 <code>Has</code>, <code>Is</code>, <code>Can</code> 或 <code>Allow</code> 开头</li></ul><h3 id="常量命名" tabindex="-1">常量命名 <a class="header-anchor" href="#常量命名" aria-hidden="true">#</a></h3><p>全部大写字母组成，并使用下划线分割</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> APP_VERSION </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-hidden="true">#</a></h2><ul><li>单行注释 <code>//</code></li><li>多行注释 <code>/* */</code></li></ul><h3 id="函数注释" tabindex="-1">函数注释 <a class="header-anchor" href="#函数注释" aria-hidden="true">#</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">两数相加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">参数：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	a  加数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	b 被加数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	相加的结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="代码逻辑注释" tabindex="-1">代码逻辑注释 <a class="header-anchor" href="#代码逻辑注释" aria-hidden="true">#</a></h3><p>对于一些关键位置的代码逻辑，或者局部较为复杂的逻辑，需要有相应的逻辑说明，方便其他开发者阅读该段代码</p><h3 id="包注释" tabindex="-1">包注释 <a class="header-anchor" href="#包注释" aria-hidden="true">#</a></h3><ul><li>包的基本简介</li><li>创建者 <ul><li>创建人：名字</li></ul></li><li>创建时间 <ul><li>创建时间： yyyyMMdd</li></ul></li></ul><h3 id="接口注释" tabindex="-1">接口注释 <a class="header-anchor" href="#接口注释" aria-hidden="true">#</a></h3><p>每个自定义的结构体或者接口都应该有注释说明，该注释对结构进行简要介绍，放在结构体定义的前一行</p><p>格式为： 结构体名， 结构体说明</p><h3 id="注释风格" tabindex="-1">注释风格 <a class="header-anchor" href="#注释风格" aria-hidden="true">#</a></h3><p>统一采用中文（或英文注释），中英文字符之间严格采用空格分隔，英文和中文标点之间也要使用空格分隔</p><p>单行注释不要过长，不要超过 120 个字符</p><h2 id="import-规范" tabindex="-1">import 规范 <a class="header-anchor" href="#import-规范" aria-hidden="true">#</a></h2><h3 id="import-格式" tabindex="-1">import 格式 <a class="header-anchor" href="#import-格式" aria-hidden="true">#</a></h3><p><code>import</code> 在多行的情况下，<code>goimports</code> 会自动帮你格式化，如果你在一个文件里面引入了一个 <code>package</code>，还是建议采用如下格式：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="包引入顺序" tabindex="-1">包引入顺序 <a class="header-anchor" href="#包引入顺序" aria-hidden="true">#</a></h3><p>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包。需要按照下面顺序引入</p><ul><li>标准库包</li><li>第三方包</li><li>程序内部包</li></ul><p>如果是引入本项目中的其他包，最好使用<strong>相对路径</strong></p><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-hidden="true">#</a></h2><ul><li>错误处理的原则就是不能丢弃任何有返回 err 的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回 err，或者使用 log 记录下来</li><li>尽早 <code>return</code>：一旦有错误发生，马上返回</li><li>尽量不要使用 <code>panic</code>，除非你知道你在做什么</li><li>错误描述如果是<strong>英文</strong>必须为<strong>小写</strong>，<strong>不需要</strong>标点结尾</li><li>采用独立的错误流进行处理</li></ul>`,48),p=[o];function t(i,c,r,d,h,y){return n(),a("div",null,p)}const u=s(e,[["render",t]]);export{C as __pageData,u as default};
